// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: customer_identity/customer_identity.proto

package customer_identity

import (
	pagination "github.com/djoonta/kponboardingproto/pagination"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CustomerIdentityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary Key
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Customer Details
	Name                string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Nickname            string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	IdentityNumber      string `protobuf:"bytes,4,opt,name=identity_number,json=identityNumber,proto3" json:"identity_number,omitempty"`
	Phone               string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	PhoneFamily         string `protobuf:"bytes,6,opt,name=phone_family,json=phoneFamily,proto3" json:"phone_family,omitempty"`
	CityOfBirth         string `protobuf:"bytes,7,opt,name=city_of_birth,json=cityOfBirth,proto3" json:"city_of_birth,omitempty"`
	DayOfBirth          string `protobuf:"bytes,8,opt,name=day_of_birth,json=dayOfBirth,proto3" json:"day_of_birth,omitempty"`
	NameHusband         string `protobuf:"bytes,9,opt,name=name_husband,json=nameHusband,proto3" json:"name_husband,omitempty"`
	NameWife            string `protobuf:"bytes,10,opt,name=name_wife,json=nameWife,proto3" json:"name_wife,omitempty"`
	Email               string `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`
	Address             string `protobuf:"bytes,12,opt,name=address,proto3" json:"address,omitempty"`
	AddressDomicile     string `protobuf:"bytes,13,opt,name=address_domicile,json=addressDomicile,proto3" json:"address_domicile,omitempty"`
	CustomerImage       string `protobuf:"bytes,14,opt,name=customer_image,json=customerImage,proto3" json:"customer_image,omitempty"`
	IdentityNumberImage string `protobuf:"bytes,15,opt,name=identity_number_image,json=identityNumberImage,proto3" json:"identity_number_image,omitempty"`
	HusbandImage        string `protobuf:"bytes,16,opt,name=husband_image,json=husbandImage,proto3" json:"husband_image,omitempty"`
	WifeImage           string `protobuf:"bytes,17,opt,name=wife_image,json=wifeImage,proto3" json:"wife_image,omitempty"`
	HomeImage           string `protobuf:"bytes,18,opt,name=home_image,json=homeImage,proto3" json:"home_image,omitempty"`
	EncumbranceImage    string `protobuf:"bytes,19,opt,name=encumbrance_image,json=encumbranceImage,proto3" json:"encumbrance_image,omitempty"` // command (foto jaminan)
	FamilyCardImage     string `protobuf:"bytes,20,opt,name=family_card_image,json=familyCardImage,proto3" json:"family_card_image,omitempty"`  // command (foto Kk)
	Longitude           string `protobuf:"bytes,21,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude            string `protobuf:"bytes,22,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Password            string `protobuf:"bytes,23,opt,name=password,proto3" json:"password,omitempty"`
	// Relationships
	InstallmentCategoryId string `protobuf:"bytes,24,opt,name=installment_category_id,json=installmentCategoryId,proto3" json:"installment_category_id,omitempty"`
	EncumbranceCategoryId string `protobuf:"bytes,25,opt,name=encumbrance_category_id,json=encumbranceCategoryId,proto3" json:"encumbrance_category_id,omitempty"`
	ProfessionId          string `protobuf:"bytes,26,opt,name=profession_id,json=professionId,proto3" json:"profession_id,omitempty"`
	// Group Information
	NameGroup         string `protobuf:"bytes,27,opt,name=name_group,json=nameGroup,proto3" json:"name_group,omitempty"`
	NameGroupChairman string `protobuf:"bytes,28,opt,name=name_group_chairman,json=nameGroupChairman,proto3" json:"name_group_chairman,omitempty"`
	// Financial Details
	AmountLoan          float64 `protobuf:"fixed64,29,opt,name=amount_loan,json=amountLoan,proto3" json:"amount_loan,omitempty"`
	AmountCreditPayment float64 `protobuf:"fixed64,30,opt,name=amount_credit_payment,json=amountCreditPayment,proto3" json:"amount_credit_payment,omitempty"`
	// Survey Information
	SurveyorName string `protobuf:"bytes,31,opt,name=surveyor_name,json=surveyorName,proto3" json:"surveyor_name,omitempty"`
	// Time Period Information
	TimePeriod         int32  `protobuf:"varint,32,opt,name=time_period,json=timePeriod,proto3" json:"time_period,omitempty"`
	TimePeriodCategory string `protobuf:"bytes,33,opt,name=time_period_category,json=timePeriodCategory,proto3" json:"time_period_category,omitempty"` // command (hari,minggu, bulan)
	// Location Information
	Province   string `protobuf:"bytes,34,opt,name=province,proto3" json:"province,omitempty"`
	Regency    string `protobuf:"bytes,35,opt,name=regency,proto3" json:"regency,omitempty"`
	District   string `protobuf:"bytes,36,opt,name=district,proto3" json:"district,omitempty"`
	Village    string `protobuf:"bytes,37,opt,name=village,proto3" json:"village,omitempty"`
	Postalcode string `protobuf:"bytes,38,opt,name=postalcode,proto3" json:"postalcode,omitempty"`
	// Marriage Information
	IsMariage          bool   `protobuf:"varint,39,opt,name=is_mariage,json=isMariage,proto3" json:"is_mariage,omitempty"`                             // command (if false need add upload document approval_parent_file)
	ApprovalParentFile string `protobuf:"bytes,40,opt,name=approval_parent_file,json=approvalParentFile,proto3" json:"approval_parent_file,omitempty"` // command if is_mariage is false
	// Status Information
	Status string `protobuf:"bytes,41,opt,name=status,proto3" json:"status,omitempty"`
	// Token Information
	Token string `protobuf:"bytes,42,opt,name=token,proto3" json:"token,omitempty"`
	// Relationships Detail
	InstallmentCategoryName string `protobuf:"bytes,43,opt,name=installment_category_name,json=installmentCategoryName,proto3" json:"installment_category_name,omitempty"`
	EncumbranceCategoryName string `protobuf:"bytes,44,opt,name=encumbrance_category_name,json=encumbranceCategoryName,proto3" json:"encumbrance_category_name,omitempty"`
	ProfessionName          string `protobuf:"bytes,45,opt,name=profession_name,json=professionName,proto3" json:"profession_name,omitempty"`
}

func (x *CustomerIdentityInfo) Reset() {
	*x = CustomerIdentityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_identity_customer_identity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerIdentityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerIdentityInfo) ProtoMessage() {}

func (x *CustomerIdentityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_customer_identity_customer_identity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerIdentityInfo.ProtoReflect.Descriptor instead.
func (*CustomerIdentityInfo) Descriptor() ([]byte, []int) {
	return file_customer_identity_customer_identity_proto_rawDescGZIP(), []int{0}
}

func (x *CustomerIdentityInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CustomerIdentityInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomerIdentityInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CustomerIdentityInfo) GetIdentityNumber() string {
	if x != nil {
		return x.IdentityNumber
	}
	return ""
}

func (x *CustomerIdentityInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CustomerIdentityInfo) GetPhoneFamily() string {
	if x != nil {
		return x.PhoneFamily
	}
	return ""
}

func (x *CustomerIdentityInfo) GetCityOfBirth() string {
	if x != nil {
		return x.CityOfBirth
	}
	return ""
}

func (x *CustomerIdentityInfo) GetDayOfBirth() string {
	if x != nil {
		return x.DayOfBirth
	}
	return ""
}

func (x *CustomerIdentityInfo) GetNameHusband() string {
	if x != nil {
		return x.NameHusband
	}
	return ""
}

func (x *CustomerIdentityInfo) GetNameWife() string {
	if x != nil {
		return x.NameWife
	}
	return ""
}

func (x *CustomerIdentityInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CustomerIdentityInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CustomerIdentityInfo) GetAddressDomicile() string {
	if x != nil {
		return x.AddressDomicile
	}
	return ""
}

func (x *CustomerIdentityInfo) GetCustomerImage() string {
	if x != nil {
		return x.CustomerImage
	}
	return ""
}

func (x *CustomerIdentityInfo) GetIdentityNumberImage() string {
	if x != nil {
		return x.IdentityNumberImage
	}
	return ""
}

func (x *CustomerIdentityInfo) GetHusbandImage() string {
	if x != nil {
		return x.HusbandImage
	}
	return ""
}

func (x *CustomerIdentityInfo) GetWifeImage() string {
	if x != nil {
		return x.WifeImage
	}
	return ""
}

func (x *CustomerIdentityInfo) GetHomeImage() string {
	if x != nil {
		return x.HomeImage
	}
	return ""
}

func (x *CustomerIdentityInfo) GetEncumbranceImage() string {
	if x != nil {
		return x.EncumbranceImage
	}
	return ""
}

func (x *CustomerIdentityInfo) GetFamilyCardImage() string {
	if x != nil {
		return x.FamilyCardImage
	}
	return ""
}

func (x *CustomerIdentityInfo) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *CustomerIdentityInfo) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *CustomerIdentityInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CustomerIdentityInfo) GetInstallmentCategoryId() string {
	if x != nil {
		return x.InstallmentCategoryId
	}
	return ""
}

func (x *CustomerIdentityInfo) GetEncumbranceCategoryId() string {
	if x != nil {
		return x.EncumbranceCategoryId
	}
	return ""
}

func (x *CustomerIdentityInfo) GetProfessionId() string {
	if x != nil {
		return x.ProfessionId
	}
	return ""
}

func (x *CustomerIdentityInfo) GetNameGroup() string {
	if x != nil {
		return x.NameGroup
	}
	return ""
}

func (x *CustomerIdentityInfo) GetNameGroupChairman() string {
	if x != nil {
		return x.NameGroupChairman
	}
	return ""
}

func (x *CustomerIdentityInfo) GetAmountLoan() float64 {
	if x != nil {
		return x.AmountLoan
	}
	return 0
}

func (x *CustomerIdentityInfo) GetAmountCreditPayment() float64 {
	if x != nil {
		return x.AmountCreditPayment
	}
	return 0
}

func (x *CustomerIdentityInfo) GetSurveyorName() string {
	if x != nil {
		return x.SurveyorName
	}
	return ""
}

func (x *CustomerIdentityInfo) GetTimePeriod() int32 {
	if x != nil {
		return x.TimePeriod
	}
	return 0
}

func (x *CustomerIdentityInfo) GetTimePeriodCategory() string {
	if x != nil {
		return x.TimePeriodCategory
	}
	return ""
}

func (x *CustomerIdentityInfo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CustomerIdentityInfo) GetRegency() string {
	if x != nil {
		return x.Regency
	}
	return ""
}

func (x *CustomerIdentityInfo) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *CustomerIdentityInfo) GetVillage() string {
	if x != nil {
		return x.Village
	}
	return ""
}

func (x *CustomerIdentityInfo) GetPostalcode() string {
	if x != nil {
		return x.Postalcode
	}
	return ""
}

func (x *CustomerIdentityInfo) GetIsMariage() bool {
	if x != nil {
		return x.IsMariage
	}
	return false
}

func (x *CustomerIdentityInfo) GetApprovalParentFile() string {
	if x != nil {
		return x.ApprovalParentFile
	}
	return ""
}

func (x *CustomerIdentityInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CustomerIdentityInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CustomerIdentityInfo) GetInstallmentCategoryName() string {
	if x != nil {
		return x.InstallmentCategoryName
	}
	return ""
}

func (x *CustomerIdentityInfo) GetEncumbranceCategoryName() string {
	if x != nil {
		return x.EncumbranceCategoryName
	}
	return ""
}

func (x *CustomerIdentityInfo) GetProfessionName() string {
	if x != nil {
		return x.ProfessionName
	}
	return ""
}

type CustomerIdentityCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Customer Details
	Name                string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Nickname            string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	IdentityNumber      string `protobuf:"bytes,3,opt,name=identity_number,json=identityNumber,proto3" json:"identity_number,omitempty"`
	Phone               string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	PhoneFamily         string `protobuf:"bytes,5,opt,name=phone_family,json=phoneFamily,proto3" json:"phone_family,omitempty"`
	CityOfBirth         string `protobuf:"bytes,6,opt,name=city_of_birth,json=cityOfBirth,proto3" json:"city_of_birth,omitempty"`
	DayOfBirth          string `protobuf:"bytes,7,opt,name=day_of_birth,json=dayOfBirth,proto3" json:"day_of_birth,omitempty"`
	NameHusband         string `protobuf:"bytes,8,opt,name=name_husband,json=nameHusband,proto3" json:"name_husband,omitempty"`
	NameWife            string `protobuf:"bytes,9,opt,name=name_wife,json=nameWife,proto3" json:"name_wife,omitempty"`
	Email               string `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
	Address             string `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
	AddressDomicile     string `protobuf:"bytes,12,opt,name=address_domicile,json=addressDomicile,proto3" json:"address_domicile,omitempty"`
	CustomerImage       string `protobuf:"bytes,13,opt,name=customer_image,json=customerImage,proto3" json:"customer_image,omitempty"`
	IdentityNumberImage string `protobuf:"bytes,14,opt,name=identity_number_image,json=identityNumberImage,proto3" json:"identity_number_image,omitempty"`
	HusbandImage        string `protobuf:"bytes,15,opt,name=husband_image,json=husbandImage,proto3" json:"husband_image,omitempty"`
	WifeImage           string `protobuf:"bytes,16,opt,name=wife_image,json=wifeImage,proto3" json:"wife_image,omitempty"`
	HomeImage           string `protobuf:"bytes,17,opt,name=home_image,json=homeImage,proto3" json:"home_image,omitempty"`
	EncumbranceImage    string `protobuf:"bytes,18,opt,name=encumbrance_image,json=encumbranceImage,proto3" json:"encumbrance_image,omitempty"` // command (foto jaminan)
	FamilyCardImage     string `protobuf:"bytes,19,opt,name=family_card_image,json=familyCardImage,proto3" json:"family_card_image,omitempty"`  // command (foto Kk)
	Longitude           string `protobuf:"bytes,20,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude            string `protobuf:"bytes,21,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Password            string `protobuf:"bytes,22,opt,name=password,proto3" json:"password,omitempty"`
	// Relationships
	InstallmentCategoryId string `protobuf:"bytes,23,opt,name=installment_category_id,json=installmentCategoryId,proto3" json:"installment_category_id,omitempty"`
	EncumbranceCategoryId string `protobuf:"bytes,24,opt,name=encumbrance_category_id,json=encumbranceCategoryId,proto3" json:"encumbrance_category_id,omitempty"`
	ProfessionId          string `protobuf:"bytes,25,opt,name=profession_id,json=professionId,proto3" json:"profession_id,omitempty"`
	// Group Information
	NameGroup         string `protobuf:"bytes,26,opt,name=name_group,json=nameGroup,proto3" json:"name_group,omitempty"`
	NameGroupChairman string `protobuf:"bytes,27,opt,name=name_group_chairman,json=nameGroupChairman,proto3" json:"name_group_chairman,omitempty"`
	// Financial Details
	AmountLoan          float64 `protobuf:"fixed64,28,opt,name=amount_loan,json=amountLoan,proto3" json:"amount_loan,omitempty"`
	AmountCreditPayment float64 `protobuf:"fixed64,29,opt,name=amount_credit_payment,json=amountCreditPayment,proto3" json:"amount_credit_payment,omitempty"`
	// Survey Information
	SurveyorName string `protobuf:"bytes,30,opt,name=surveyor_name,json=surveyorName,proto3" json:"surveyor_name,omitempty"`
	// Time Period Information
	TimePeriod         int32  `protobuf:"varint,31,opt,name=time_period,json=timePeriod,proto3" json:"time_period,omitempty"`
	TimePeriodCategory string `protobuf:"bytes,32,opt,name=time_period_category,json=timePeriodCategory,proto3" json:"time_period_category,omitempty"` // command (hari,minggu, bulan)
	// Location Information
	Province   string `protobuf:"bytes,33,opt,name=province,proto3" json:"province,omitempty"`
	Regency    string `protobuf:"bytes,34,opt,name=regency,proto3" json:"regency,omitempty"`
	District   string `protobuf:"bytes,35,opt,name=district,proto3" json:"district,omitempty"`
	Village    string `protobuf:"bytes,36,opt,name=village,proto3" json:"village,omitempty"`
	Postalcode string `protobuf:"bytes,37,opt,name=postalcode,proto3" json:"postalcode,omitempty"`
	// Marriage Information
	IsMariage          bool   `protobuf:"varint,38,opt,name=is_mariage,json=isMariage,proto3" json:"is_mariage,omitempty"`                             // command (if false need add upload document approval_parent_file)
	ApprovalParentFile string `protobuf:"bytes,39,opt,name=approval_parent_file,json=approvalParentFile,proto3" json:"approval_parent_file,omitempty"` // command if is_mariage is false
	// Status Information
	Status string `protobuf:"bytes,40,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CustomerIdentityCreateRequest) Reset() {
	*x = CustomerIdentityCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_identity_customer_identity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerIdentityCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerIdentityCreateRequest) ProtoMessage() {}

func (x *CustomerIdentityCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_identity_customer_identity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerIdentityCreateRequest.ProtoReflect.Descriptor instead.
func (*CustomerIdentityCreateRequest) Descriptor() ([]byte, []int) {
	return file_customer_identity_customer_identity_proto_rawDescGZIP(), []int{1}
}

func (x *CustomerIdentityCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetIdentityNumber() string {
	if x != nil {
		return x.IdentityNumber
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetPhoneFamily() string {
	if x != nil {
		return x.PhoneFamily
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetCityOfBirth() string {
	if x != nil {
		return x.CityOfBirth
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetDayOfBirth() string {
	if x != nil {
		return x.DayOfBirth
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetNameHusband() string {
	if x != nil {
		return x.NameHusband
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetNameWife() string {
	if x != nil {
		return x.NameWife
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetAddressDomicile() string {
	if x != nil {
		return x.AddressDomicile
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetCustomerImage() string {
	if x != nil {
		return x.CustomerImage
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetIdentityNumberImage() string {
	if x != nil {
		return x.IdentityNumberImage
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetHusbandImage() string {
	if x != nil {
		return x.HusbandImage
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetWifeImage() string {
	if x != nil {
		return x.WifeImage
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetHomeImage() string {
	if x != nil {
		return x.HomeImage
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetEncumbranceImage() string {
	if x != nil {
		return x.EncumbranceImage
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetFamilyCardImage() string {
	if x != nil {
		return x.FamilyCardImage
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetInstallmentCategoryId() string {
	if x != nil {
		return x.InstallmentCategoryId
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetEncumbranceCategoryId() string {
	if x != nil {
		return x.EncumbranceCategoryId
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetProfessionId() string {
	if x != nil {
		return x.ProfessionId
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetNameGroup() string {
	if x != nil {
		return x.NameGroup
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetNameGroupChairman() string {
	if x != nil {
		return x.NameGroupChairman
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetAmountLoan() float64 {
	if x != nil {
		return x.AmountLoan
	}
	return 0
}

func (x *CustomerIdentityCreateRequest) GetAmountCreditPayment() float64 {
	if x != nil {
		return x.AmountCreditPayment
	}
	return 0
}

func (x *CustomerIdentityCreateRequest) GetSurveyorName() string {
	if x != nil {
		return x.SurveyorName
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetTimePeriod() int32 {
	if x != nil {
		return x.TimePeriod
	}
	return 0
}

func (x *CustomerIdentityCreateRequest) GetTimePeriodCategory() string {
	if x != nil {
		return x.TimePeriodCategory
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetRegency() string {
	if x != nil {
		return x.Regency
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetVillage() string {
	if x != nil {
		return x.Village
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetPostalcode() string {
	if x != nil {
		return x.Postalcode
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetIsMariage() bool {
	if x != nil {
		return x.IsMariage
	}
	return false
}

func (x *CustomerIdentityCreateRequest) GetApprovalParentFile() string {
	if x != nil {
		return x.ApprovalParentFile
	}
	return ""
}

func (x *CustomerIdentityCreateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CustomerIdentityCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CustomerIdentityCreateResponse) Reset() {
	*x = CustomerIdentityCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_identity_customer_identity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerIdentityCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerIdentityCreateResponse) ProtoMessage() {}

func (x *CustomerIdentityCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customer_identity_customer_identity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerIdentityCreateResponse.ProtoReflect.Descriptor instead.
func (*CustomerIdentityCreateResponse) Descriptor() ([]byte, []int) {
	return file_customer_identity_customer_identity_proto_rawDescGZIP(), []int{2}
}

func (x *CustomerIdentityCreateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CustomerIdentityUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary Key
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Customer Details
	Name                string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Nickname            string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	IdentityNumber      string `protobuf:"bytes,4,opt,name=identity_number,json=identityNumber,proto3" json:"identity_number,omitempty"`
	Phone               string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	PhoneFamily         string `protobuf:"bytes,6,opt,name=phone_family,json=phoneFamily,proto3" json:"phone_family,omitempty"`
	CityOfBirth         string `protobuf:"bytes,7,opt,name=city_of_birth,json=cityOfBirth,proto3" json:"city_of_birth,omitempty"`
	DayOfBirth          string `protobuf:"bytes,8,opt,name=day_of_birth,json=dayOfBirth,proto3" json:"day_of_birth,omitempty"`
	NameHusband         string `protobuf:"bytes,9,opt,name=name_husband,json=nameHusband,proto3" json:"name_husband,omitempty"`
	NameWife            string `protobuf:"bytes,10,opt,name=name_wife,json=nameWife,proto3" json:"name_wife,omitempty"`
	Email               string `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`
	Address             string `protobuf:"bytes,12,opt,name=address,proto3" json:"address,omitempty"`
	AddressDomicile     string `protobuf:"bytes,13,opt,name=address_domicile,json=addressDomicile,proto3" json:"address_domicile,omitempty"`
	CustomerImage       string `protobuf:"bytes,14,opt,name=customer_image,json=customerImage,proto3" json:"customer_image,omitempty"`
	IdentityNumberImage string `protobuf:"bytes,15,opt,name=identity_number_image,json=identityNumberImage,proto3" json:"identity_number_image,omitempty"`
	HusbandImage        string `protobuf:"bytes,16,opt,name=husband_image,json=husbandImage,proto3" json:"husband_image,omitempty"`
	WifeImage           string `protobuf:"bytes,17,opt,name=wife_image,json=wifeImage,proto3" json:"wife_image,omitempty"`
	HomeImage           string `protobuf:"bytes,18,opt,name=home_image,json=homeImage,proto3" json:"home_image,omitempty"`
	EncumbranceImage    string `protobuf:"bytes,19,opt,name=encumbrance_image,json=encumbranceImage,proto3" json:"encumbrance_image,omitempty"` // command (foto jaminan)
	FamilyCardImage     string `protobuf:"bytes,20,opt,name=family_card_image,json=familyCardImage,proto3" json:"family_card_image,omitempty"`  // command (foto Kk)
	Longitude           string `protobuf:"bytes,21,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude            string `protobuf:"bytes,22,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Password            string `protobuf:"bytes,23,opt,name=password,proto3" json:"password,omitempty"`
	// Relationships
	InstallmentCategoryId string `protobuf:"bytes,24,opt,name=installment_category_id,json=installmentCategoryId,proto3" json:"installment_category_id,omitempty"`
	EncumbranceCategoryId string `protobuf:"bytes,25,opt,name=encumbrance_category_id,json=encumbranceCategoryId,proto3" json:"encumbrance_category_id,omitempty"`
	ProfessionId          string `protobuf:"bytes,26,opt,name=profession_id,json=professionId,proto3" json:"profession_id,omitempty"`
	// Group Information
	NameGroup         string `protobuf:"bytes,27,opt,name=name_group,json=nameGroup,proto3" json:"name_group,omitempty"`
	NameGroupChairman string `protobuf:"bytes,28,opt,name=name_group_chairman,json=nameGroupChairman,proto3" json:"name_group_chairman,omitempty"`
	// Financial Details
	AmountLoan          float64 `protobuf:"fixed64,29,opt,name=amount_loan,json=amountLoan,proto3" json:"amount_loan,omitempty"`
	AmountCreditPayment float64 `protobuf:"fixed64,30,opt,name=amount_credit_payment,json=amountCreditPayment,proto3" json:"amount_credit_payment,omitempty"`
	// Survey Information
	SurveyorName string `protobuf:"bytes,31,opt,name=surveyor_name,json=surveyorName,proto3" json:"surveyor_name,omitempty"`
	// Time Period Information
	TimePeriod         int32  `protobuf:"varint,32,opt,name=time_period,json=timePeriod,proto3" json:"time_period,omitempty"`
	TimePeriodCategory string `protobuf:"bytes,33,opt,name=time_period_category,json=timePeriodCategory,proto3" json:"time_period_category,omitempty"` // command (hari,minggu, bulan)
	// Location Information
	Province   string `protobuf:"bytes,34,opt,name=province,proto3" json:"province,omitempty"`
	Regency    string `protobuf:"bytes,35,opt,name=regency,proto3" json:"regency,omitempty"`
	District   string `protobuf:"bytes,36,opt,name=district,proto3" json:"district,omitempty"`
	Village    string `protobuf:"bytes,37,opt,name=village,proto3" json:"village,omitempty"`
	Postalcode string `protobuf:"bytes,38,opt,name=postalcode,proto3" json:"postalcode,omitempty"`
	// Marriage Information
	IsMariage          bool   `protobuf:"varint,39,opt,name=is_mariage,json=isMariage,proto3" json:"is_mariage,omitempty"`                             // command (if false need add upload document approval_parent_file)
	ApprovalParentFile string `protobuf:"bytes,40,opt,name=approval_parent_file,json=approvalParentFile,proto3" json:"approval_parent_file,omitempty"` // command if is_mariage is false
	// Status Information
	Status string `protobuf:"bytes,41,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CustomerIdentityUpdateRequest) Reset() {
	*x = CustomerIdentityUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_identity_customer_identity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerIdentityUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerIdentityUpdateRequest) ProtoMessage() {}

func (x *CustomerIdentityUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_identity_customer_identity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerIdentityUpdateRequest.ProtoReflect.Descriptor instead.
func (*CustomerIdentityUpdateRequest) Descriptor() ([]byte, []int) {
	return file_customer_identity_customer_identity_proto_rawDescGZIP(), []int{3}
}

func (x *CustomerIdentityUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetIdentityNumber() string {
	if x != nil {
		return x.IdentityNumber
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetPhoneFamily() string {
	if x != nil {
		return x.PhoneFamily
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetCityOfBirth() string {
	if x != nil {
		return x.CityOfBirth
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetDayOfBirth() string {
	if x != nil {
		return x.DayOfBirth
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetNameHusband() string {
	if x != nil {
		return x.NameHusband
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetNameWife() string {
	if x != nil {
		return x.NameWife
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetAddressDomicile() string {
	if x != nil {
		return x.AddressDomicile
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetCustomerImage() string {
	if x != nil {
		return x.CustomerImage
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetIdentityNumberImage() string {
	if x != nil {
		return x.IdentityNumberImage
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetHusbandImage() string {
	if x != nil {
		return x.HusbandImage
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetWifeImage() string {
	if x != nil {
		return x.WifeImage
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetHomeImage() string {
	if x != nil {
		return x.HomeImage
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetEncumbranceImage() string {
	if x != nil {
		return x.EncumbranceImage
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetFamilyCardImage() string {
	if x != nil {
		return x.FamilyCardImage
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetInstallmentCategoryId() string {
	if x != nil {
		return x.InstallmentCategoryId
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetEncumbranceCategoryId() string {
	if x != nil {
		return x.EncumbranceCategoryId
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetProfessionId() string {
	if x != nil {
		return x.ProfessionId
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetNameGroup() string {
	if x != nil {
		return x.NameGroup
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetNameGroupChairman() string {
	if x != nil {
		return x.NameGroupChairman
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetAmountLoan() float64 {
	if x != nil {
		return x.AmountLoan
	}
	return 0
}

func (x *CustomerIdentityUpdateRequest) GetAmountCreditPayment() float64 {
	if x != nil {
		return x.AmountCreditPayment
	}
	return 0
}

func (x *CustomerIdentityUpdateRequest) GetSurveyorName() string {
	if x != nil {
		return x.SurveyorName
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetTimePeriod() int32 {
	if x != nil {
		return x.TimePeriod
	}
	return 0
}

func (x *CustomerIdentityUpdateRequest) GetTimePeriodCategory() string {
	if x != nil {
		return x.TimePeriodCategory
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetRegency() string {
	if x != nil {
		return x.Regency
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetVillage() string {
	if x != nil {
		return x.Village
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetPostalcode() string {
	if x != nil {
		return x.Postalcode
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetIsMariage() bool {
	if x != nil {
		return x.IsMariage
	}
	return false
}

func (x *CustomerIdentityUpdateRequest) GetApprovalParentFile() string {
	if x != nil {
		return x.ApprovalParentFile
	}
	return ""
}

func (x *CustomerIdentityUpdateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CustomerIdentityUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CustomerIdentityUpdateResponse) Reset() {
	*x = CustomerIdentityUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_identity_customer_identity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerIdentityUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerIdentityUpdateResponse) ProtoMessage() {}

func (x *CustomerIdentityUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customer_identity_customer_identity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerIdentityUpdateResponse.ProtoReflect.Descriptor instead.
func (*CustomerIdentityUpdateResponse) Descriptor() ([]byte, []int) {
	return file_customer_identity_customer_identity_proto_rawDescGZIP(), []int{4}
}

func (x *CustomerIdentityUpdateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CustomerIdentityDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CustomerIdentityDeleteRequest) Reset() {
	*x = CustomerIdentityDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_identity_customer_identity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerIdentityDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerIdentityDeleteRequest) ProtoMessage() {}

func (x *CustomerIdentityDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_identity_customer_identity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerIdentityDeleteRequest.ProtoReflect.Descriptor instead.
func (*CustomerIdentityDeleteRequest) Descriptor() ([]byte, []int) {
	return file_customer_identity_customer_identity_proto_rawDescGZIP(), []int{5}
}

func (x *CustomerIdentityDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CustomerIdentityDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CustomerIdentityDeleteResponse) Reset() {
	*x = CustomerIdentityDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_identity_customer_identity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerIdentityDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerIdentityDeleteResponse) ProtoMessage() {}

func (x *CustomerIdentityDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customer_identity_customer_identity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerIdentityDeleteResponse.ProtoReflect.Descriptor instead.
func (*CustomerIdentityDeleteResponse) Descriptor() ([]byte, []int) {
	return file_customer_identity_customer_identity_proto_rawDescGZIP(), []int{6}
}

func (x *CustomerIdentityDeleteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CustomerIdentityToggleStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CustomerIdentityToggleStatusRequest) Reset() {
	*x = CustomerIdentityToggleStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_identity_customer_identity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerIdentityToggleStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerIdentityToggleStatusRequest) ProtoMessage() {}

func (x *CustomerIdentityToggleStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_identity_customer_identity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerIdentityToggleStatusRequest.ProtoReflect.Descriptor instead.
func (*CustomerIdentityToggleStatusRequest) Descriptor() ([]byte, []int) {
	return file_customer_identity_customer_identity_proto_rawDescGZIP(), []int{7}
}

func (x *CustomerIdentityToggleStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CustomerIdentityToggleStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CustomerIdentityToggleStatusResponse) Reset() {
	*x = CustomerIdentityToggleStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_identity_customer_identity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerIdentityToggleStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerIdentityToggleStatusResponse) ProtoMessage() {}

func (x *CustomerIdentityToggleStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customer_identity_customer_identity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerIdentityToggleStatusResponse.ProtoReflect.Descriptor instead.
func (*CustomerIdentityToggleStatusResponse) Descriptor() ([]byte, []int) {
	return file_customer_identity_customer_identity_proto_rawDescGZIP(), []int{8}
}

func (x *CustomerIdentityToggleStatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CustomerIdentityFindIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CustomerIdentityFindIDRequest) Reset() {
	*x = CustomerIdentityFindIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_identity_customer_identity_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerIdentityFindIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerIdentityFindIDRequest) ProtoMessage() {}

func (x *CustomerIdentityFindIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_identity_customer_identity_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerIdentityFindIDRequest.ProtoReflect.Descriptor instead.
func (*CustomerIdentityFindIDRequest) Descriptor() ([]byte, []int) {
	return file_customer_identity_customer_identity_proto_rawDescGZIP(), []int{9}
}

func (x *CustomerIdentityFindIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CustomerIdentityFindIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerIdentityInfo *CustomerIdentityInfo `protobuf:"bytes,1,opt,name=customer_identity_info,json=customerIdentityInfo,proto3" json:"customer_identity_info,omitempty"`
}

func (x *CustomerIdentityFindIDResponse) Reset() {
	*x = CustomerIdentityFindIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_identity_customer_identity_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerIdentityFindIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerIdentityFindIDResponse) ProtoMessage() {}

func (x *CustomerIdentityFindIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customer_identity_customer_identity_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerIdentityFindIDResponse.ProtoReflect.Descriptor instead.
func (*CustomerIdentityFindIDResponse) Descriptor() ([]byte, []int) {
	return file_customer_identity_customer_identity_proto_rawDescGZIP(), []int{10}
}

func (x *CustomerIdentityFindIDResponse) GetCustomerIdentityInfo() *CustomerIdentityInfo {
	if x != nil {
		return x.CustomerIdentityInfo
	}
	return nil
}

type CustomerIdentityFindAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  string `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit string `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CustomerIdentityFindAllRequest) Reset() {
	*x = CustomerIdentityFindAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_identity_customer_identity_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerIdentityFindAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerIdentityFindAllRequest) ProtoMessage() {}

func (x *CustomerIdentityFindAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_identity_customer_identity_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerIdentityFindAllRequest.ProtoReflect.Descriptor instead.
func (*CustomerIdentityFindAllRequest) Descriptor() ([]byte, []int) {
	return file_customer_identity_customer_identity_proto_rawDescGZIP(), []int{11}
}

func (x *CustomerIdentityFindAllRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *CustomerIdentityFindAllRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

type CustomerIdentityFindAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerIdentities []*CustomerIdentityInfo              `protobuf:"bytes,1,rep,name=customer_identities,json=customerIdentities,proto3" json:"customer_identities,omitempty"`
	Pagination         *pagination.OnboardingPaginationInfo `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *CustomerIdentityFindAllResponse) Reset() {
	*x = CustomerIdentityFindAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_identity_customer_identity_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerIdentityFindAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerIdentityFindAllResponse) ProtoMessage() {}

func (x *CustomerIdentityFindAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customer_identity_customer_identity_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerIdentityFindAllResponse.ProtoReflect.Descriptor instead.
func (*CustomerIdentityFindAllResponse) Descriptor() ([]byte, []int) {
	return file_customer_identity_customer_identity_proto_rawDescGZIP(), []int{12}
}

func (x *CustomerIdentityFindAllResponse) GetCustomerIdentities() []*CustomerIdentityInfo {
	if x != nil {
		return x.CustomerIdentities
	}
	return nil
}

func (x *CustomerIdentityFindAllResponse) GetPagination() *pagination.OnboardingPaginationInfo {
	if x != nil {
		return x.Pagination
	}
	return nil
}

var File_customer_identity_customer_identity_proto protoreflect.FileDescriptor

var file_customer_identity_customer_identity_proto_rawDesc = []byte{
	0x0a, 0x29, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6b, 0x70, 0x6f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x0c, 0x0a, 0x14,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6f,
	0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x69, 0x74, 0x79, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61,
	0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x75, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x75, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x66, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x66, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44,
	0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x75, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x75, 0x73, 0x62, 0x61,
	0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x66, 0x65, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x69, 0x66,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x65, 0x6e, 0x63, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17,
	0x65, 0x6e, 0x63, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65,
	0x6e, 0x63, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x6d, 0x61, 0x6e, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x68, 0x61, 0x69, 0x72, 0x6d, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x6c, 0x6c, 0x61,
	0x67, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x69, 0x61, 0x67, 0x65, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x61, 0x72, 0x69, 0x61, 0x67, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x19,
	0x65, 0x6e, 0x63, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x65, 0x6e, 0x63, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xa5, 0x0b, 0x0a, 0x1d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66,
	0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x69,
	0x74, 0x79, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x68, 0x75, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x75, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x66, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x66, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x6f,
	0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x75, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x75, 0x73, 0x62, 0x61, 0x6e,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x66, 0x65, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x69, 0x66, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x65, 0x6e, 0x63, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x65,
	0x6e, 0x63, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x6e,
	0x63, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x6d, 0x61, 0x6e, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x68, 0x61, 0x69, 0x72, 0x6d, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67,
	0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x69, 0x61, 0x67, 0x65, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x61, 0x72, 0x69, 0x61, 0x67, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3a, 0x0a, 0x1e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xb5, 0x0b, 0x0a, 0x1d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x20, 0x0a,
	0x0c, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x75, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x75, 0x73, 0x62, 0x61,
	0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x66, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x66, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x69, 0x63,
	0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x44, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x75, 0x73, 0x62, 0x61, 0x6e, 0x64,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x75,
	0x73, 0x62, 0x61, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69,
	0x66, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x77, 0x69, 0x66, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6d,
	0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68,
	0x6f, 0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x17, 0x65, 0x6e, 0x63, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x65, 0x6e, 0x63, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x6d,
	0x61, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x69, 0x72, 0x6d, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x15,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69,
	0x6c, 0x6c, 0x61, 0x67, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x6c,
	0x6c, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x69, 0x61,
	0x67, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x61, 0x72, 0x69,
	0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3a, 0x0a,
	0x1e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x2f, 0x0a, 0x1d, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x1e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x35, 0x0a, 0x23, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a,
	0x24, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x2f, 0x0a, 0x1d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x7f, 0x0a, 0x1e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5d, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x70, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x4a, 0x0a, 0x1e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc8, 0x01,
	0x0a, 0x1f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6b, 0x70, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6b, 0x70, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6a, 0x6f, 0x6f, 0x6e, 0x74, 0x61, 0x2f, 0x6b,
	0x70, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_customer_identity_customer_identity_proto_rawDescOnce sync.Once
	file_customer_identity_customer_identity_proto_rawDescData = file_customer_identity_customer_identity_proto_rawDesc
)

func file_customer_identity_customer_identity_proto_rawDescGZIP() []byte {
	file_customer_identity_customer_identity_proto_rawDescOnce.Do(func() {
		file_customer_identity_customer_identity_proto_rawDescData = protoimpl.X.CompressGZIP(file_customer_identity_customer_identity_proto_rawDescData)
	})
	return file_customer_identity_customer_identity_proto_rawDescData
}

var file_customer_identity_customer_identity_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_customer_identity_customer_identity_proto_goTypes = []interface{}{
	(*CustomerIdentityInfo)(nil),                 // 0: kponboardingproto.CustomerIdentityInfo
	(*CustomerIdentityCreateRequest)(nil),        // 1: kponboardingproto.CustomerIdentityCreateRequest
	(*CustomerIdentityCreateResponse)(nil),       // 2: kponboardingproto.CustomerIdentityCreateResponse
	(*CustomerIdentityUpdateRequest)(nil),        // 3: kponboardingproto.CustomerIdentityUpdateRequest
	(*CustomerIdentityUpdateResponse)(nil),       // 4: kponboardingproto.CustomerIdentityUpdateResponse
	(*CustomerIdentityDeleteRequest)(nil),        // 5: kponboardingproto.CustomerIdentityDeleteRequest
	(*CustomerIdentityDeleteResponse)(nil),       // 6: kponboardingproto.CustomerIdentityDeleteResponse
	(*CustomerIdentityToggleStatusRequest)(nil),  // 7: kponboardingproto.CustomerIdentityToggleStatusRequest
	(*CustomerIdentityToggleStatusResponse)(nil), // 8: kponboardingproto.CustomerIdentityToggleStatusResponse
	(*CustomerIdentityFindIDRequest)(nil),        // 9: kponboardingproto.CustomerIdentityFindIDRequest
	(*CustomerIdentityFindIDResponse)(nil),       // 10: kponboardingproto.CustomerIdentityFindIDResponse
	(*CustomerIdentityFindAllRequest)(nil),       // 11: kponboardingproto.CustomerIdentityFindAllRequest
	(*CustomerIdentityFindAllResponse)(nil),      // 12: kponboardingproto.CustomerIdentityFindAllResponse
	(*pagination.OnboardingPaginationInfo)(nil),  // 13: kponboardingproto.OnboardingPaginationInfo
}
var file_customer_identity_customer_identity_proto_depIdxs = []int32{
	0,  // 0: kponboardingproto.CustomerIdentityFindIDResponse.customer_identity_info:type_name -> kponboardingproto.CustomerIdentityInfo
	0,  // 1: kponboardingproto.CustomerIdentityFindAllResponse.customer_identities:type_name -> kponboardingproto.CustomerIdentityInfo
	13, // 2: kponboardingproto.CustomerIdentityFindAllResponse.pagination:type_name -> kponboardingproto.OnboardingPaginationInfo
	3,  // [3:3] is the sub-list for method output_type
	3,  // [3:3] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_customer_identity_customer_identity_proto_init() }
func file_customer_identity_customer_identity_proto_init() {
	if File_customer_identity_customer_identity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_customer_identity_customer_identity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerIdentityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_identity_customer_identity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerIdentityCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_identity_customer_identity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerIdentityCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_identity_customer_identity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerIdentityUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_identity_customer_identity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerIdentityUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_identity_customer_identity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerIdentityDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_identity_customer_identity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerIdentityDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_identity_customer_identity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerIdentityToggleStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_identity_customer_identity_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerIdentityToggleStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_identity_customer_identity_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerIdentityFindIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_identity_customer_identity_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerIdentityFindIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_identity_customer_identity_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerIdentityFindAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_identity_customer_identity_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerIdentityFindAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_customer_identity_customer_identity_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_customer_identity_customer_identity_proto_goTypes,
		DependencyIndexes: file_customer_identity_customer_identity_proto_depIdxs,
		MessageInfos:      file_customer_identity_customer_identity_proto_msgTypes,
	}.Build()
	File_customer_identity_customer_identity_proto = out.File
	file_customer_identity_customer_identity_proto_rawDesc = nil
	file_customer_identity_customer_identity_proto_goTypes = nil
	file_customer_identity_customer_identity_proto_depIdxs = nil
}
