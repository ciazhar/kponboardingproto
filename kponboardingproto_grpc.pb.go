// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: kponboardingproto.proto

package kponboardingproto

import (
	context "context"
	installment_category "github.com/djoonta/kponboardingproto/installment_category"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InstallmentCategoryService_InstallmentCategoryCreate_FullMethodName = "/kponboardingproto.InstallmentCategoryService/InstallmentCategoryCreate"
	InstallmentCategoryService_InstallmentCategoryFindID_FullMethodName = "/kponboardingproto.InstallmentCategoryService/InstallmentCategoryFindID"
)

// InstallmentCategoryServiceClient is the client API for InstallmentCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstallmentCategoryServiceClient interface {
	InstallmentCategoryCreate(ctx context.Context, in *installment_category.InstallmentCategoryCreateRequest, opts ...grpc.CallOption) (*installment_category.InstallmentCategoryCreateResponse, error)
	InstallmentCategoryFindID(ctx context.Context, in *installment_category.InstallmentCategoryFindIDRequest, opts ...grpc.CallOption) (*installment_category.InstallmentCategoryFindIDResponse, error)
}

type installmentCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstallmentCategoryServiceClient(cc grpc.ClientConnInterface) InstallmentCategoryServiceClient {
	return &installmentCategoryServiceClient{cc}
}

func (c *installmentCategoryServiceClient) InstallmentCategoryCreate(ctx context.Context, in *installment_category.InstallmentCategoryCreateRequest, opts ...grpc.CallOption) (*installment_category.InstallmentCategoryCreateResponse, error) {
	out := new(installment_category.InstallmentCategoryCreateResponse)
	err := c.cc.Invoke(ctx, InstallmentCategoryService_InstallmentCategoryCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentCategoryServiceClient) InstallmentCategoryFindID(ctx context.Context, in *installment_category.InstallmentCategoryFindIDRequest, opts ...grpc.CallOption) (*installment_category.InstallmentCategoryFindIDResponse, error) {
	out := new(installment_category.InstallmentCategoryFindIDResponse)
	err := c.cc.Invoke(ctx, InstallmentCategoryService_InstallmentCategoryFindID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstallmentCategoryServiceServer is the server API for InstallmentCategoryService service.
// All implementations must embed UnimplementedInstallmentCategoryServiceServer
// for forward compatibility
type InstallmentCategoryServiceServer interface {
	InstallmentCategoryCreate(context.Context, *installment_category.InstallmentCategoryCreateRequest) (*installment_category.InstallmentCategoryCreateResponse, error)
	InstallmentCategoryFindID(context.Context, *installment_category.InstallmentCategoryFindIDRequest) (*installment_category.InstallmentCategoryFindIDResponse, error)
	mustEmbedUnimplementedInstallmentCategoryServiceServer()
}

// UnimplementedInstallmentCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInstallmentCategoryServiceServer struct {
}

func (UnimplementedInstallmentCategoryServiceServer) InstallmentCategoryCreate(context.Context, *installment_category.InstallmentCategoryCreateRequest) (*installment_category.InstallmentCategoryCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallmentCategoryCreate not implemented")
}
func (UnimplementedInstallmentCategoryServiceServer) InstallmentCategoryFindID(context.Context, *installment_category.InstallmentCategoryFindIDRequest) (*installment_category.InstallmentCategoryFindIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallmentCategoryFindID not implemented")
}
func (UnimplementedInstallmentCategoryServiceServer) mustEmbedUnimplementedInstallmentCategoryServiceServer() {
}

// UnsafeInstallmentCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstallmentCategoryServiceServer will
// result in compilation errors.
type UnsafeInstallmentCategoryServiceServer interface {
	mustEmbedUnimplementedInstallmentCategoryServiceServer()
}

func RegisterInstallmentCategoryServiceServer(s grpc.ServiceRegistrar, srv InstallmentCategoryServiceServer) {
	s.RegisterService(&InstallmentCategoryService_ServiceDesc, srv)
}

func _InstallmentCategoryService_InstallmentCategoryCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(installment_category.InstallmentCategoryCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentCategoryServiceServer).InstallmentCategoryCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstallmentCategoryService_InstallmentCategoryCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentCategoryServiceServer).InstallmentCategoryCreate(ctx, req.(*installment_category.InstallmentCategoryCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentCategoryService_InstallmentCategoryFindID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(installment_category.InstallmentCategoryFindIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentCategoryServiceServer).InstallmentCategoryFindID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstallmentCategoryService_InstallmentCategoryFindID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentCategoryServiceServer).InstallmentCategoryFindID(ctx, req.(*installment_category.InstallmentCategoryFindIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstallmentCategoryService_ServiceDesc is the grpc.ServiceDesc for InstallmentCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstallmentCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kponboardingproto.InstallmentCategoryService",
	HandlerType: (*InstallmentCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallmentCategoryCreate",
			Handler:    _InstallmentCategoryService_InstallmentCategoryCreate_Handler,
		},
		{
			MethodName: "InstallmentCategoryFindID",
			Handler:    _InstallmentCategoryService_InstallmentCategoryFindID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kponboardingproto.proto",
}
