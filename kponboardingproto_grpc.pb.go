// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: kponboardingproto.proto

package kponboardingproto

import (
	context "context"
	customer_identity "github.com/djoonta/kponboardingproto/customer_identity"
	customer_identity_verification "github.com/djoonta/kponboardingproto/customer_identity_verification"
	installment_category "github.com/djoonta/kponboardingproto/installment_category"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InstallmentCategoryServiceClient is the client API for InstallmentCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstallmentCategoryServiceClient interface {
	InstallmentCategoryCreate(ctx context.Context, in *installment_category.InstallmentCategoryCreateRequest, opts ...grpc.CallOption) (*installment_category.InstallmentCategoryCreateResponse, error)
	InstallmentCategoryFindID(ctx context.Context, in *installment_category.InstallmentCategoryFindIDRequest, opts ...grpc.CallOption) (*installment_category.InstallmentCategoryFindIDResponse, error)
}

type installmentCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstallmentCategoryServiceClient(cc grpc.ClientConnInterface) InstallmentCategoryServiceClient {
	return &installmentCategoryServiceClient{cc}
}

func (c *installmentCategoryServiceClient) InstallmentCategoryCreate(ctx context.Context, in *installment_category.InstallmentCategoryCreateRequest, opts ...grpc.CallOption) (*installment_category.InstallmentCategoryCreateResponse, error) {
	out := new(installment_category.InstallmentCategoryCreateResponse)
	err := c.cc.Invoke(ctx, "/kponboardingproto.InstallmentCategoryService/InstallmentCategoryCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installmentCategoryServiceClient) InstallmentCategoryFindID(ctx context.Context, in *installment_category.InstallmentCategoryFindIDRequest, opts ...grpc.CallOption) (*installment_category.InstallmentCategoryFindIDResponse, error) {
	out := new(installment_category.InstallmentCategoryFindIDResponse)
	err := c.cc.Invoke(ctx, "/kponboardingproto.InstallmentCategoryService/InstallmentCategoryFindID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstallmentCategoryServiceServer is the server API for InstallmentCategoryService service.
// All implementations must embed UnimplementedInstallmentCategoryServiceServer
// for forward compatibility
type InstallmentCategoryServiceServer interface {
	InstallmentCategoryCreate(context.Context, *installment_category.InstallmentCategoryCreateRequest) (*installment_category.InstallmentCategoryCreateResponse, error)
	InstallmentCategoryFindID(context.Context, *installment_category.InstallmentCategoryFindIDRequest) (*installment_category.InstallmentCategoryFindIDResponse, error)
	mustEmbedUnimplementedInstallmentCategoryServiceServer()
}

// UnimplementedInstallmentCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInstallmentCategoryServiceServer struct {
}

func (UnimplementedInstallmentCategoryServiceServer) InstallmentCategoryCreate(context.Context, *installment_category.InstallmentCategoryCreateRequest) (*installment_category.InstallmentCategoryCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallmentCategoryCreate not implemented")
}
func (UnimplementedInstallmentCategoryServiceServer) InstallmentCategoryFindID(context.Context, *installment_category.InstallmentCategoryFindIDRequest) (*installment_category.InstallmentCategoryFindIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallmentCategoryFindID not implemented")
}
func (UnimplementedInstallmentCategoryServiceServer) mustEmbedUnimplementedInstallmentCategoryServiceServer() {
}

// UnsafeInstallmentCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstallmentCategoryServiceServer will
// result in compilation errors.
type UnsafeInstallmentCategoryServiceServer interface {
	mustEmbedUnimplementedInstallmentCategoryServiceServer()
}

func RegisterInstallmentCategoryServiceServer(s grpc.ServiceRegistrar, srv InstallmentCategoryServiceServer) {
	s.RegisterService(&InstallmentCategoryService_ServiceDesc, srv)
}

func _InstallmentCategoryService_InstallmentCategoryCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(installment_category.InstallmentCategoryCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentCategoryServiceServer).InstallmentCategoryCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kponboardingproto.InstallmentCategoryService/InstallmentCategoryCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentCategoryServiceServer).InstallmentCategoryCreate(ctx, req.(*installment_category.InstallmentCategoryCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallmentCategoryService_InstallmentCategoryFindID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(installment_category.InstallmentCategoryFindIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallmentCategoryServiceServer).InstallmentCategoryFindID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kponboardingproto.InstallmentCategoryService/InstallmentCategoryFindID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallmentCategoryServiceServer).InstallmentCategoryFindID(ctx, req.(*installment_category.InstallmentCategoryFindIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstallmentCategoryService_ServiceDesc is the grpc.ServiceDesc for InstallmentCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstallmentCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kponboardingproto.InstallmentCategoryService",
	HandlerType: (*InstallmentCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallmentCategoryCreate",
			Handler:    _InstallmentCategoryService_InstallmentCategoryCreate_Handler,
		},
		{
			MethodName: "InstallmentCategoryFindID",
			Handler:    _InstallmentCategoryService_InstallmentCategoryFindID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kponboardingproto.proto",
}

// CustomerIdentityServiceClient is the client API for CustomerIdentityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerIdentityServiceClient interface {
	CustomerIdentityCreate(ctx context.Context, in *customer_identity.CustomerIdentityCreateRequest, opts ...grpc.CallOption) (*customer_identity.CustomerIdentityCreateResponse, error)
	CustomerIdentityUpdate(ctx context.Context, in *customer_identity.CustomerIdentityUpdateRequest, opts ...grpc.CallOption) (*customer_identity.CustomerIdentityUpdateResponse, error)
	CustomerIdentityDelete(ctx context.Context, in *customer_identity.CustomerIdentityDeleteRequest, opts ...grpc.CallOption) (*customer_identity.CustomerIdentityDeleteResponse, error)
	CustomerIdentityToggleStatus(ctx context.Context, in *customer_identity.CustomerIdentityToggleStatusRequest, opts ...grpc.CallOption) (*customer_identity.CustomerIdentityToggleStatusResponse, error)
	CustomerIdentityFindID(ctx context.Context, in *customer_identity.CustomerIdentityFindIDRequest, opts ...grpc.CallOption) (*customer_identity.CustomerIdentityFindIDResponse, error)
	CustomerIdentityFindAll(ctx context.Context, in *customer_identity.CustomerIdentityFindAllRequest, opts ...grpc.CallOption) (*customer_identity.CustomerIdentityFindAllResponse, error)
}

type customerIdentityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerIdentityServiceClient(cc grpc.ClientConnInterface) CustomerIdentityServiceClient {
	return &customerIdentityServiceClient{cc}
}

func (c *customerIdentityServiceClient) CustomerIdentityCreate(ctx context.Context, in *customer_identity.CustomerIdentityCreateRequest, opts ...grpc.CallOption) (*customer_identity.CustomerIdentityCreateResponse, error) {
	out := new(customer_identity.CustomerIdentityCreateResponse)
	err := c.cc.Invoke(ctx, "/kponboardingproto.CustomerIdentityService/CustomerIdentityCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerIdentityServiceClient) CustomerIdentityUpdate(ctx context.Context, in *customer_identity.CustomerIdentityUpdateRequest, opts ...grpc.CallOption) (*customer_identity.CustomerIdentityUpdateResponse, error) {
	out := new(customer_identity.CustomerIdentityUpdateResponse)
	err := c.cc.Invoke(ctx, "/kponboardingproto.CustomerIdentityService/CustomerIdentityUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerIdentityServiceClient) CustomerIdentityDelete(ctx context.Context, in *customer_identity.CustomerIdentityDeleteRequest, opts ...grpc.CallOption) (*customer_identity.CustomerIdentityDeleteResponse, error) {
	out := new(customer_identity.CustomerIdentityDeleteResponse)
	err := c.cc.Invoke(ctx, "/kponboardingproto.CustomerIdentityService/CustomerIdentityDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerIdentityServiceClient) CustomerIdentityToggleStatus(ctx context.Context, in *customer_identity.CustomerIdentityToggleStatusRequest, opts ...grpc.CallOption) (*customer_identity.CustomerIdentityToggleStatusResponse, error) {
	out := new(customer_identity.CustomerIdentityToggleStatusResponse)
	err := c.cc.Invoke(ctx, "/kponboardingproto.CustomerIdentityService/CustomerIdentityToggleStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerIdentityServiceClient) CustomerIdentityFindID(ctx context.Context, in *customer_identity.CustomerIdentityFindIDRequest, opts ...grpc.CallOption) (*customer_identity.CustomerIdentityFindIDResponse, error) {
	out := new(customer_identity.CustomerIdentityFindIDResponse)
	err := c.cc.Invoke(ctx, "/kponboardingproto.CustomerIdentityService/CustomerIdentityFindID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerIdentityServiceClient) CustomerIdentityFindAll(ctx context.Context, in *customer_identity.CustomerIdentityFindAllRequest, opts ...grpc.CallOption) (*customer_identity.CustomerIdentityFindAllResponse, error) {
	out := new(customer_identity.CustomerIdentityFindAllResponse)
	err := c.cc.Invoke(ctx, "/kponboardingproto.CustomerIdentityService/CustomerIdentityFindAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerIdentityServiceServer is the server API for CustomerIdentityService service.
// All implementations must embed UnimplementedCustomerIdentityServiceServer
// for forward compatibility
type CustomerIdentityServiceServer interface {
	CustomerIdentityCreate(context.Context, *customer_identity.CustomerIdentityCreateRequest) (*customer_identity.CustomerIdentityCreateResponse, error)
	CustomerIdentityUpdate(context.Context, *customer_identity.CustomerIdentityUpdateRequest) (*customer_identity.CustomerIdentityUpdateResponse, error)
	CustomerIdentityDelete(context.Context, *customer_identity.CustomerIdentityDeleteRequest) (*customer_identity.CustomerIdentityDeleteResponse, error)
	CustomerIdentityToggleStatus(context.Context, *customer_identity.CustomerIdentityToggleStatusRequest) (*customer_identity.CustomerIdentityToggleStatusResponse, error)
	CustomerIdentityFindID(context.Context, *customer_identity.CustomerIdentityFindIDRequest) (*customer_identity.CustomerIdentityFindIDResponse, error)
	CustomerIdentityFindAll(context.Context, *customer_identity.CustomerIdentityFindAllRequest) (*customer_identity.CustomerIdentityFindAllResponse, error)
	mustEmbedUnimplementedCustomerIdentityServiceServer()
}

// UnimplementedCustomerIdentityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerIdentityServiceServer struct {
}

func (UnimplementedCustomerIdentityServiceServer) CustomerIdentityCreate(context.Context, *customer_identity.CustomerIdentityCreateRequest) (*customer_identity.CustomerIdentityCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerIdentityCreate not implemented")
}
func (UnimplementedCustomerIdentityServiceServer) CustomerIdentityUpdate(context.Context, *customer_identity.CustomerIdentityUpdateRequest) (*customer_identity.CustomerIdentityUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerIdentityUpdate not implemented")
}
func (UnimplementedCustomerIdentityServiceServer) CustomerIdentityDelete(context.Context, *customer_identity.CustomerIdentityDeleteRequest) (*customer_identity.CustomerIdentityDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerIdentityDelete not implemented")
}
func (UnimplementedCustomerIdentityServiceServer) CustomerIdentityToggleStatus(context.Context, *customer_identity.CustomerIdentityToggleStatusRequest) (*customer_identity.CustomerIdentityToggleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerIdentityToggleStatus not implemented")
}
func (UnimplementedCustomerIdentityServiceServer) CustomerIdentityFindID(context.Context, *customer_identity.CustomerIdentityFindIDRequest) (*customer_identity.CustomerIdentityFindIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerIdentityFindID not implemented")
}
func (UnimplementedCustomerIdentityServiceServer) CustomerIdentityFindAll(context.Context, *customer_identity.CustomerIdentityFindAllRequest) (*customer_identity.CustomerIdentityFindAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerIdentityFindAll not implemented")
}
func (UnimplementedCustomerIdentityServiceServer) mustEmbedUnimplementedCustomerIdentityServiceServer() {
}

// UnsafeCustomerIdentityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerIdentityServiceServer will
// result in compilation errors.
type UnsafeCustomerIdentityServiceServer interface {
	mustEmbedUnimplementedCustomerIdentityServiceServer()
}

func RegisterCustomerIdentityServiceServer(s grpc.ServiceRegistrar, srv CustomerIdentityServiceServer) {
	s.RegisterService(&CustomerIdentityService_ServiceDesc, srv)
}

func _CustomerIdentityService_CustomerIdentityCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_identity.CustomerIdentityCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerIdentityServiceServer).CustomerIdentityCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kponboardingproto.CustomerIdentityService/CustomerIdentityCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerIdentityServiceServer).CustomerIdentityCreate(ctx, req.(*customer_identity.CustomerIdentityCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerIdentityService_CustomerIdentityUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_identity.CustomerIdentityUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerIdentityServiceServer).CustomerIdentityUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kponboardingproto.CustomerIdentityService/CustomerIdentityUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerIdentityServiceServer).CustomerIdentityUpdate(ctx, req.(*customer_identity.CustomerIdentityUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerIdentityService_CustomerIdentityDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_identity.CustomerIdentityDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerIdentityServiceServer).CustomerIdentityDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kponboardingproto.CustomerIdentityService/CustomerIdentityDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerIdentityServiceServer).CustomerIdentityDelete(ctx, req.(*customer_identity.CustomerIdentityDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerIdentityService_CustomerIdentityToggleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_identity.CustomerIdentityToggleStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerIdentityServiceServer).CustomerIdentityToggleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kponboardingproto.CustomerIdentityService/CustomerIdentityToggleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerIdentityServiceServer).CustomerIdentityToggleStatus(ctx, req.(*customer_identity.CustomerIdentityToggleStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerIdentityService_CustomerIdentityFindID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_identity.CustomerIdentityFindIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerIdentityServiceServer).CustomerIdentityFindID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kponboardingproto.CustomerIdentityService/CustomerIdentityFindID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerIdentityServiceServer).CustomerIdentityFindID(ctx, req.(*customer_identity.CustomerIdentityFindIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerIdentityService_CustomerIdentityFindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_identity.CustomerIdentityFindAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerIdentityServiceServer).CustomerIdentityFindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kponboardingproto.CustomerIdentityService/CustomerIdentityFindAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerIdentityServiceServer).CustomerIdentityFindAll(ctx, req.(*customer_identity.CustomerIdentityFindAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerIdentityService_ServiceDesc is the grpc.ServiceDesc for CustomerIdentityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerIdentityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kponboardingproto.CustomerIdentityService",
	HandlerType: (*CustomerIdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CustomerIdentityCreate",
			Handler:    _CustomerIdentityService_CustomerIdentityCreate_Handler,
		},
		{
			MethodName: "CustomerIdentityUpdate",
			Handler:    _CustomerIdentityService_CustomerIdentityUpdate_Handler,
		},
		{
			MethodName: "CustomerIdentityDelete",
			Handler:    _CustomerIdentityService_CustomerIdentityDelete_Handler,
		},
		{
			MethodName: "CustomerIdentityToggleStatus",
			Handler:    _CustomerIdentityService_CustomerIdentityToggleStatus_Handler,
		},
		{
			MethodName: "CustomerIdentityFindID",
			Handler:    _CustomerIdentityService_CustomerIdentityFindID_Handler,
		},
		{
			MethodName: "CustomerIdentityFindAll",
			Handler:    _CustomerIdentityService_CustomerIdentityFindAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kponboardingproto.proto",
}

// CustomerIdentityVerificationServiceClient is the client API for CustomerIdentityVerificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerIdentityVerificationServiceClient interface {
	CustomerIdentityVerificationCreate(ctx context.Context, in *customer_identity_verification.CustomerIdentityVerificationCreateRequest, opts ...grpc.CallOption) (*customer_identity_verification.CustomerIdentityVerificationCreateResponse, error)
	CustomerIdentityVerificationUpdate(ctx context.Context, in *customer_identity_verification.CustomerIdentityVerificationUpdateRequest, opts ...grpc.CallOption) (*customer_identity_verification.CustomerIdentityVerificationUpdateResponse, error)
	CustomerIdentityVerificationDelete(ctx context.Context, in *customer_identity_verification.CustomerIdentityVerificationDeleteRequest, opts ...grpc.CallOption) (*customer_identity_verification.CustomerIdentityVerificationDeleteResponse, error)
	CustomerIdentityVerificationFindID(ctx context.Context, in *customer_identity_verification.CustomerIdentityVerificationFindIDRequest, opts ...grpc.CallOption) (*customer_identity_verification.CustomerIdentityVerificationFindIDResponse, error)
	CustomerIdentityVerificationFindAll(ctx context.Context, in *customer_identity_verification.CustomerIdentityVerificationFindAllRequest, opts ...grpc.CallOption) (*customer_identity.CustomerIdentityFindAllResponse, error)
}

type customerIdentityVerificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerIdentityVerificationServiceClient(cc grpc.ClientConnInterface) CustomerIdentityVerificationServiceClient {
	return &customerIdentityVerificationServiceClient{cc}
}

func (c *customerIdentityVerificationServiceClient) CustomerIdentityVerificationCreate(ctx context.Context, in *customer_identity_verification.CustomerIdentityVerificationCreateRequest, opts ...grpc.CallOption) (*customer_identity_verification.CustomerIdentityVerificationCreateResponse, error) {
	out := new(customer_identity_verification.CustomerIdentityVerificationCreateResponse)
	err := c.cc.Invoke(ctx, "/kponboardingproto.CustomerIdentityVerificationService/CustomerIdentityVerificationCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerIdentityVerificationServiceClient) CustomerIdentityVerificationUpdate(ctx context.Context, in *customer_identity_verification.CustomerIdentityVerificationUpdateRequest, opts ...grpc.CallOption) (*customer_identity_verification.CustomerIdentityVerificationUpdateResponse, error) {
	out := new(customer_identity_verification.CustomerIdentityVerificationUpdateResponse)
	err := c.cc.Invoke(ctx, "/kponboardingproto.CustomerIdentityVerificationService/CustomerIdentityVerificationUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerIdentityVerificationServiceClient) CustomerIdentityVerificationDelete(ctx context.Context, in *customer_identity_verification.CustomerIdentityVerificationDeleteRequest, opts ...grpc.CallOption) (*customer_identity_verification.CustomerIdentityVerificationDeleteResponse, error) {
	out := new(customer_identity_verification.CustomerIdentityVerificationDeleteResponse)
	err := c.cc.Invoke(ctx, "/kponboardingproto.CustomerIdentityVerificationService/CustomerIdentityVerificationDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerIdentityVerificationServiceClient) CustomerIdentityVerificationFindID(ctx context.Context, in *customer_identity_verification.CustomerIdentityVerificationFindIDRequest, opts ...grpc.CallOption) (*customer_identity_verification.CustomerIdentityVerificationFindIDResponse, error) {
	out := new(customer_identity_verification.CustomerIdentityVerificationFindIDResponse)
	err := c.cc.Invoke(ctx, "/kponboardingproto.CustomerIdentityVerificationService/CustomerIdentityVerificationFindID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerIdentityVerificationServiceClient) CustomerIdentityVerificationFindAll(ctx context.Context, in *customer_identity_verification.CustomerIdentityVerificationFindAllRequest, opts ...grpc.CallOption) (*customer_identity.CustomerIdentityFindAllResponse, error) {
	out := new(customer_identity.CustomerIdentityFindAllResponse)
	err := c.cc.Invoke(ctx, "/kponboardingproto.CustomerIdentityVerificationService/CustomerIdentityVerificationFindAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerIdentityVerificationServiceServer is the server API for CustomerIdentityVerificationService service.
// All implementations must embed UnimplementedCustomerIdentityVerificationServiceServer
// for forward compatibility
type CustomerIdentityVerificationServiceServer interface {
	CustomerIdentityVerificationCreate(context.Context, *customer_identity_verification.CustomerIdentityVerificationCreateRequest) (*customer_identity_verification.CustomerIdentityVerificationCreateResponse, error)
	CustomerIdentityVerificationUpdate(context.Context, *customer_identity_verification.CustomerIdentityVerificationUpdateRequest) (*customer_identity_verification.CustomerIdentityVerificationUpdateResponse, error)
	CustomerIdentityVerificationDelete(context.Context, *customer_identity_verification.CustomerIdentityVerificationDeleteRequest) (*customer_identity_verification.CustomerIdentityVerificationDeleteResponse, error)
	CustomerIdentityVerificationFindID(context.Context, *customer_identity_verification.CustomerIdentityVerificationFindIDRequest) (*customer_identity_verification.CustomerIdentityVerificationFindIDResponse, error)
	CustomerIdentityVerificationFindAll(context.Context, *customer_identity_verification.CustomerIdentityVerificationFindAllRequest) (*customer_identity.CustomerIdentityFindAllResponse, error)
	mustEmbedUnimplementedCustomerIdentityVerificationServiceServer()
}

// UnimplementedCustomerIdentityVerificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerIdentityVerificationServiceServer struct {
}

func (UnimplementedCustomerIdentityVerificationServiceServer) CustomerIdentityVerificationCreate(context.Context, *customer_identity_verification.CustomerIdentityVerificationCreateRequest) (*customer_identity_verification.CustomerIdentityVerificationCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerIdentityVerificationCreate not implemented")
}
func (UnimplementedCustomerIdentityVerificationServiceServer) CustomerIdentityVerificationUpdate(context.Context, *customer_identity_verification.CustomerIdentityVerificationUpdateRequest) (*customer_identity_verification.CustomerIdentityVerificationUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerIdentityVerificationUpdate not implemented")
}
func (UnimplementedCustomerIdentityVerificationServiceServer) CustomerIdentityVerificationDelete(context.Context, *customer_identity_verification.CustomerIdentityVerificationDeleteRequest) (*customer_identity_verification.CustomerIdentityVerificationDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerIdentityVerificationDelete not implemented")
}
func (UnimplementedCustomerIdentityVerificationServiceServer) CustomerIdentityVerificationFindID(context.Context, *customer_identity_verification.CustomerIdentityVerificationFindIDRequest) (*customer_identity_verification.CustomerIdentityVerificationFindIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerIdentityVerificationFindID not implemented")
}
func (UnimplementedCustomerIdentityVerificationServiceServer) CustomerIdentityVerificationFindAll(context.Context, *customer_identity_verification.CustomerIdentityVerificationFindAllRequest) (*customer_identity.CustomerIdentityFindAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerIdentityVerificationFindAll not implemented")
}
func (UnimplementedCustomerIdentityVerificationServiceServer) mustEmbedUnimplementedCustomerIdentityVerificationServiceServer() {
}

// UnsafeCustomerIdentityVerificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerIdentityVerificationServiceServer will
// result in compilation errors.
type UnsafeCustomerIdentityVerificationServiceServer interface {
	mustEmbedUnimplementedCustomerIdentityVerificationServiceServer()
}

func RegisterCustomerIdentityVerificationServiceServer(s grpc.ServiceRegistrar, srv CustomerIdentityVerificationServiceServer) {
	s.RegisterService(&CustomerIdentityVerificationService_ServiceDesc, srv)
}

func _CustomerIdentityVerificationService_CustomerIdentityVerificationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_identity_verification.CustomerIdentityVerificationCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerIdentityVerificationServiceServer).CustomerIdentityVerificationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kponboardingproto.CustomerIdentityVerificationService/CustomerIdentityVerificationCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerIdentityVerificationServiceServer).CustomerIdentityVerificationCreate(ctx, req.(*customer_identity_verification.CustomerIdentityVerificationCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerIdentityVerificationService_CustomerIdentityVerificationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_identity_verification.CustomerIdentityVerificationUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerIdentityVerificationServiceServer).CustomerIdentityVerificationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kponboardingproto.CustomerIdentityVerificationService/CustomerIdentityVerificationUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerIdentityVerificationServiceServer).CustomerIdentityVerificationUpdate(ctx, req.(*customer_identity_verification.CustomerIdentityVerificationUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerIdentityVerificationService_CustomerIdentityVerificationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_identity_verification.CustomerIdentityVerificationDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerIdentityVerificationServiceServer).CustomerIdentityVerificationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kponboardingproto.CustomerIdentityVerificationService/CustomerIdentityVerificationDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerIdentityVerificationServiceServer).CustomerIdentityVerificationDelete(ctx, req.(*customer_identity_verification.CustomerIdentityVerificationDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerIdentityVerificationService_CustomerIdentityVerificationFindID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_identity_verification.CustomerIdentityVerificationFindIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerIdentityVerificationServiceServer).CustomerIdentityVerificationFindID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kponboardingproto.CustomerIdentityVerificationService/CustomerIdentityVerificationFindID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerIdentityVerificationServiceServer).CustomerIdentityVerificationFindID(ctx, req.(*customer_identity_verification.CustomerIdentityVerificationFindIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerIdentityVerificationService_CustomerIdentityVerificationFindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_identity_verification.CustomerIdentityVerificationFindAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerIdentityVerificationServiceServer).CustomerIdentityVerificationFindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kponboardingproto.CustomerIdentityVerificationService/CustomerIdentityVerificationFindAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerIdentityVerificationServiceServer).CustomerIdentityVerificationFindAll(ctx, req.(*customer_identity_verification.CustomerIdentityVerificationFindAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerIdentityVerificationService_ServiceDesc is the grpc.ServiceDesc for CustomerIdentityVerificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerIdentityVerificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kponboardingproto.CustomerIdentityVerificationService",
	HandlerType: (*CustomerIdentityVerificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CustomerIdentityVerificationCreate",
			Handler:    _CustomerIdentityVerificationService_CustomerIdentityVerificationCreate_Handler,
		},
		{
			MethodName: "CustomerIdentityVerificationUpdate",
			Handler:    _CustomerIdentityVerificationService_CustomerIdentityVerificationUpdate_Handler,
		},
		{
			MethodName: "CustomerIdentityVerificationDelete",
			Handler:    _CustomerIdentityVerificationService_CustomerIdentityVerificationDelete_Handler,
		},
		{
			MethodName: "CustomerIdentityVerificationFindID",
			Handler:    _CustomerIdentityVerificationService_CustomerIdentityVerificationFindID_Handler,
		},
		{
			MethodName: "CustomerIdentityVerificationFindAll",
			Handler:    _CustomerIdentityVerificationService_CustomerIdentityVerificationFindAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kponboardingproto.proto",
}
